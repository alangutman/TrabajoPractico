package com.RedSocial.core.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.RedSocial.core.Exception.EntityAlreadyExistsException;
import com.RedSocial.core.Exception.InformationRequiredException;
import com.RedSocial.core.entity.Publicacion;
import com.RedSocial.core.service.PublicacionService;

@RestController
@RequestMapping("/RedSocial")
public class PublicacionController {

	@Autowired
	@Qualifier("PublicacionService")
	PublicacionService publicacionService;
	
	@PutMapping("/publicacion")
	public ResponseEntity<Object> crear(@RequestBody @Validated Publicacion publicacion) {

		try {			
			publicacionService.crear(publicacion);
		}
		catch(EntityAlreadyExistsException e) {
			return ResponseEntity
					.status(HttpStatus.BAD_REQUEST)
					.body(e.getMessage());
		}
		catch(InformationRequiredException e) {
			return ResponseEntity
					.status(HttpStatus.BAD_REQUEST)
					.body(e.getMessage());
		}

		return ResponseEntity
				.status(HttpStatus.OK)
				.body("Publicaci√≥n publicada exitosamente."); 
	}
	
	@PostMapping("/publicacion")
	public boolean actualizar(@RequestBody @Validated Publicacion publicacion) {
		return publicacionService.actualizar(publicacion);
	}
	
	@DeleteMapping("/publicacion/{idPublicacion}")
	public boolean borrar(@PathVariable("idPublicacion") long idPublicacion) {
		return publicacionService.borrar(idPublicacion);
	}
	
	@GetMapping("/publicacion")
	public List<Publicacion> obtener(){
		return publicacionService.obtener();
	}
	
	@PostMapping("/publicacion/meGusta/{idPublicacion}")
	public boolean meGusta(@PathVariable("idPublicacion") long idPublicacion) {
		return publicacionService.meGusta(idPublicacion);
	}
}
